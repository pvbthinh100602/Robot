
Test_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000290c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a3c  08002a3c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a3c  08002a3c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a3c  08002a3c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000001c  08002a60  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002a60  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ce2  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc6  00000000  00000000  00028d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002aa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007db  00000000  00000000  0002b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016fbf  00000000  00000000  0002bc5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c06b  00000000  00000000  00042c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000846a5  00000000  00000000  0004ec85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028c0  00000000  00000000  000d332c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d5bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a00 	.word	0x08002a00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002a00 	.word	0x08002a00

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR1_FORWARD_Pin|MOTOR1_BACKWARD_Pin|MOTOR2_FORWARD_Pin|MOTOR2_BACKWARD_Pin
 80001a8:	2200      	movs	r2, #0
 80001aa:	f240 313f 	movw	r1, #831	; 0x33f
 80001ae:	481b      	ldr	r0, [pc, #108]	; (800021c <MX_GPIO_Init+0xd0>)
 80001b0:	f001 f885 	bl	80012be <HAL_GPIO_WritePin>
                          |MOTOR3_FORWARD_Pin|MOTOR3_BACKWARD_Pin|MOTOR4_FORWARD_Pin|MOTOR4_BACKWARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2104      	movs	r1, #4
 80001b8:	4819      	ldr	r0, [pc, #100]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001ba:	f001 f880 	bl	80012be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR1_FORWARD_Pin|MOTOR1_BACKWARD_Pin|MOTOR2_FORWARD_Pin|MOTOR2_BACKWARD_Pin
 80001be:	f240 333f 	movw	r3, #831	; 0x33f
 80001c2:	613b      	str	r3, [r7, #16]
                          |MOTOR3_FORWARD_Pin|MOTOR3_BACKWARD_Pin|MOTOR4_FORWARD_Pin|MOTOR4_BACKWARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c4:	2301      	movs	r3, #1
 80001c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001c8:	2300      	movs	r3, #0
 80001ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001cc:	2302      	movs	r3, #2
 80001ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	4619      	mov	r1, r3
 80001d6:	4811      	ldr	r0, [pc, #68]	; (800021c <MX_GPIO_Init+0xd0>)
 80001d8:	f000 fed6 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 80001dc:	2304      	movs	r3, #4
 80001de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e0:	2301      	movs	r3, #1
 80001e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e8:	2302      	movs	r3, #2
 80001ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 80001ec:	f107 0310 	add.w	r3, r7, #16
 80001f0:	4619      	mov	r1, r3
 80001f2:	480b      	ldr	r0, [pc, #44]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001f4:	f000 fec8 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_LINE_Pin|CENTER_LINE_Pin|RIGHT_LINE_Pin;
 80001f8:	2370      	movs	r3, #112	; 0x70
 80001fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001fc:	2300      	movs	r3, #0
 80001fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000200:	2300      	movs	r3, #0
 8000202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4805      	ldr	r0, [pc, #20]	; (8000220 <MX_GPIO_Init+0xd4>)
 800020c:	f000 febc 	bl	8000f88 <HAL_GPIO_Init>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	40010c00 	.word	0x40010c00

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fd3e 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f81c 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f7ff ff8c 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000234:	f000 fbaa 	bl	800098c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000238:	f000 fbf4 	bl	8000a24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800023c:	f000 f859 	bl	80002f2 <system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!timer2_flag);
 8000240:	bf00      	nop
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <main+0x40>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0fb      	beq.n	8000242 <main+0x1e>
	  timer2_flag = 0;
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <main+0x40>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
	  test_led();
 8000250:	f000 f85a 	bl	8000308 <test_led>
	  getLineSensor();
 8000254:	f000 f9fa 	bl	800064c <getLineSensor>
	  lineFollow();
 8000258:	f000 fa2a 	bl	80006b0 <lineFollow>
	  motor_run();
 800025c:	f000 f8ee 	bl	800043c <motor_run>
	  while(!timer2_flag);
 8000260:	e7ee      	b.n	8000240 <main+0x1c>
 8000262:	bf00      	nop
 8000264:	20000064 	.word	0x20000064

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	; 0x40
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f002 fb96 	bl	80029a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028a:	2301      	movs	r3, #1
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000292:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029c:	2302      	movs	r3, #2
 800029e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 f835 	bl	8001320 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002bc:	f000 f83c 	bl	8000338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2302      	movs	r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 faa2 	bl	8001824 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e6:	f000 f827 	bl	8000338 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80002f2:	b580      	push	{r7, lr}
 80002f4:	af00      	add	r7, sp, #0
	timer2_init();
 80002f6:	f000 fa91 	bl	800081c <timer2_init>
	timer2_set(50);
 80002fa:	2032      	movs	r0, #50	; 0x32
 80002fc:	f000 fa98 	bl	8000830 <timer2_set>
	motor_init();
 8000300:	f000 f820 	bl	8000344 <motor_init>
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <test_led>:

int led_debug_counter = 0;
void test_led(){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	led_debug_counter++;
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <test_led+0x28>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	4a07      	ldr	r2, [pc, #28]	; (8000330 <test_led+0x28>)
 8000314:	6013      	str	r3, [r2, #0]
	if(led_debug_counter == 20){
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <test_led+0x28>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b14      	cmp	r3, #20
 800031c:	d106      	bne.n	800032c <test_led+0x24>
		led_debug_counter = 0;
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <test_led+0x28>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8000324:	2104      	movs	r1, #4
 8000326:	4803      	ldr	r0, [pc, #12]	; (8000334 <test_led+0x2c>)
 8000328:	f000 ffe1 	bl	80012ee <HAL_GPIO_TogglePin>
	}
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000038 	.word	0x20000038
 8000334:	40010c00 	.word	0x40010c00

08000338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033c:	b672      	cpsid	i
}
 800033e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000340:	e7fe      	b.n	8000340 <Error_Handler+0x8>
	...

08000344 <motor_init>:
uint16_t motor_forward_pin[4] = {MOTOR1_FORWARD_Pin, MOTOR2_FORWARD_Pin, MOTOR3_FORWARD_Pin, MOTOR4_FORWARD_Pin};
uint16_t motor_backward_pin[4] = {MOTOR1_BACKWARD_Pin, MOTOR2_BACKWARD_Pin, MOTOR3_BACKWARD_Pin, MOTOR4_BACKWARD_Pin};

int motor_speed[4] = {0,0,0,0};

void motor_init(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000348:	2100      	movs	r1, #0
 800034a:	4808      	ldr	r0, [pc, #32]	; (800036c <motor_init+0x28>)
 800034c:	f001 fcc0 	bl	8001cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000350:	2104      	movs	r1, #4
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <motor_init+0x28>)
 8000354:	f001 fcbc 	bl	8001cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000358:	2108      	movs	r1, #8
 800035a:	4804      	ldr	r0, [pc, #16]	; (800036c <motor_init+0x28>)
 800035c:	f001 fcb8 	bl	8001cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000360:	210c      	movs	r1, #12
 8000362:	4802      	ldr	r0, [pc, #8]	; (800036c <motor_init+0x28>)
 8000364:	f001 fcb4 	bl	8001cd0 <HAL_TIM_PWM_Start>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	200000b4 	.word	0x200000b4

08000370 <motor_dir_forward>:

void motor_dir_forward(int id){
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	if(id < 0 || id > 3) return;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	db08      	blt.n	8000390 <motor_dir_forward+0x20>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b03      	cmp	r3, #3
 8000382:	dc05      	bgt.n	8000390 <motor_dir_forward+0x20>
	motor_dir[id] = FORWARD;
 8000384:	4a05      	ldr	r2, [pc, #20]	; (800039c <motor_dir_forward+0x2c>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2101      	movs	r1, #1
 800038a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800038e:	e000      	b.n	8000392 <motor_dir_forward+0x22>
	if(id < 0 || id > 3) return;
 8000390:	bf00      	nop
}
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	2000003c 	.word	0x2000003c

080003a0 <motor_dir_backward>:

void motor_dir_backward(int id){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	if(id < 0 || id > 3) return;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	db08      	blt.n	80003c0 <motor_dir_backward+0x20>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	dc05      	bgt.n	80003c0 <motor_dir_backward+0x20>
	motor_dir[id] = BACKWARD;
 80003b4:	4a05      	ldr	r2, [pc, #20]	; (80003cc <motor_dir_backward+0x2c>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2102      	movs	r1, #2
 80003ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80003be:	e000      	b.n	80003c2 <motor_dir_backward+0x22>
	if(id < 0 || id > 3) return;
 80003c0:	bf00      	nop
}
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	2000003c 	.word	0x2000003c

080003d0 <motor_stop>:

void motor_stop(int id){
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	if(id < 0 || id > 3) return;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	db0d      	blt.n	80003fa <motor_stop+0x2a>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	dc0a      	bgt.n	80003fa <motor_stop+0x2a>
	motor_dir[id] = STOP;
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <motor_stop+0x34>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2100      	movs	r1, #0
 80003ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	motor_speed[id] = 0;
 80003ee:	4a06      	ldr	r2, [pc, #24]	; (8000408 <motor_stop+0x38>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2100      	movs	r1, #0
 80003f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80003f8:	e000      	b.n	80003fc <motor_stop+0x2c>
	if(id < 0 || id > 3) return;
 80003fa:	bf00      	nop
}
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	2000003c 	.word	0x2000003c
 8000408:	2000004c 	.word	0x2000004c

0800040c <motor_set_speed>:

void motor_set_speed(int id, int speed){
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
	if(speed < 0 || speed > 100) return;
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	db08      	blt.n	800042e <motor_set_speed+0x22>
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	2b64      	cmp	r3, #100	; 0x64
 8000420:	dc05      	bgt.n	800042e <motor_set_speed+0x22>
	motor_speed[id] = speed;
 8000422:	4905      	ldr	r1, [pc, #20]	; (8000438 <motor_set_speed+0x2c>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800042c:	e000      	b.n	8000430 <motor_set_speed+0x24>
	if(speed < 0 || speed > 100) return;
 800042e:	bf00      	nop
}
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	2000004c 	.word	0x2000004c

0800043c <motor_run>:
	HAL_GPIO_WritePin(GPIOA, motor_forward_pin[0], 1);
	HAL_GPIO_WritePin(GPIOA, motor_backward_pin[0], 0);
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 80);
}

void motor_run(){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
	for(int id = 0; id < 4; id++){
 8000442:	2300      	movs	r3, #0
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	e049      	b.n	80004dc <motor_run+0xa0>
		switch (motor_dir[id]) {
 8000448:	4a32      	ldr	r2, [pc, #200]	; (8000514 <motor_run+0xd8>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000450:	2b02      	cmp	r3, #2
 8000452:	d02c      	beq.n	80004ae <motor_run+0x72>
 8000454:	2b02      	cmp	r3, #2
 8000456:	dc3d      	bgt.n	80004d4 <motor_run+0x98>
 8000458:	2b00      	cmp	r3, #0
 800045a:	d002      	beq.n	8000462 <motor_run+0x26>
 800045c:	2b01      	cmp	r3, #1
 800045e:	d013      	beq.n	8000488 <motor_run+0x4c>
			case BACKWARD:
				HAL_GPIO_WritePin(GPIOA, motor_forward_pin[id], 0);
				HAL_GPIO_WritePin(GPIOA, motor_backward_pin[id], 1);
				break;
			default:
				break;
 8000460:	e038      	b.n	80004d4 <motor_run+0x98>
				HAL_GPIO_WritePin(GPIOA, motor_forward_pin[id], 0);
 8000462:	4a2d      	ldr	r2, [pc, #180]	; (8000518 <motor_run+0xdc>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800046a:	2200      	movs	r2, #0
 800046c:	4619      	mov	r1, r3
 800046e:	482b      	ldr	r0, [pc, #172]	; (800051c <motor_run+0xe0>)
 8000470:	f000 ff25 	bl	80012be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, motor_backward_pin[id], 0);
 8000474:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <motor_run+0xe4>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800047c:	2200      	movs	r2, #0
 800047e:	4619      	mov	r1, r3
 8000480:	4826      	ldr	r0, [pc, #152]	; (800051c <motor_run+0xe0>)
 8000482:	f000 ff1c 	bl	80012be <HAL_GPIO_WritePin>
				break;
 8000486:	e026      	b.n	80004d6 <motor_run+0x9a>
				HAL_GPIO_WritePin(GPIOA, motor_forward_pin[id], 1);
 8000488:	4a23      	ldr	r2, [pc, #140]	; (8000518 <motor_run+0xdc>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000490:	2201      	movs	r2, #1
 8000492:	4619      	mov	r1, r3
 8000494:	4821      	ldr	r0, [pc, #132]	; (800051c <motor_run+0xe0>)
 8000496:	f000 ff12 	bl	80012be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, motor_backward_pin[id], 0);
 800049a:	4a21      	ldr	r2, [pc, #132]	; (8000520 <motor_run+0xe4>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004a2:	2200      	movs	r2, #0
 80004a4:	4619      	mov	r1, r3
 80004a6:	481d      	ldr	r0, [pc, #116]	; (800051c <motor_run+0xe0>)
 80004a8:	f000 ff09 	bl	80012be <HAL_GPIO_WritePin>
				break;
 80004ac:	e013      	b.n	80004d6 <motor_run+0x9a>
				HAL_GPIO_WritePin(GPIOA, motor_forward_pin[id], 0);
 80004ae:	4a1a      	ldr	r2, [pc, #104]	; (8000518 <motor_run+0xdc>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b6:	2200      	movs	r2, #0
 80004b8:	4619      	mov	r1, r3
 80004ba:	4818      	ldr	r0, [pc, #96]	; (800051c <motor_run+0xe0>)
 80004bc:	f000 feff 	bl	80012be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, motor_backward_pin[id], 1);
 80004c0:	4a17      	ldr	r2, [pc, #92]	; (8000520 <motor_run+0xe4>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004c8:	2201      	movs	r2, #1
 80004ca:	4619      	mov	r1, r3
 80004cc:	4813      	ldr	r0, [pc, #76]	; (800051c <motor_run+0xe0>)
 80004ce:	f000 fef6 	bl	80012be <HAL_GPIO_WritePin>
				break;
 80004d2:	e000      	b.n	80004d6 <motor_run+0x9a>
				break;
 80004d4:	bf00      	nop
	for(int id = 0; id < 4; id++){
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3301      	adds	r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	ddb2      	ble.n	8000448 <motor_run+0xc>
		}
	}
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, motor_speed[0]);
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <motor_run+0xe8>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <motor_run+0xec>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, motor_speed[1]);
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <motor_run+0xe8>)
 80004ee:	685a      	ldr	r2, [r3, #4]
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <motor_run+0xec>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, motor_speed[2]);
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <motor_run+0xe8>)
 80004f8:	689a      	ldr	r2, [r3, #8]
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <motor_run+0xec>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, motor_speed[3]);
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <motor_run+0xe8>)
 8000502:	68da      	ldr	r2, [r3, #12]
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <motor_run+0xec>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	641a      	str	r2, [r3, #64]	; 0x40
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	2000003c 	.word	0x2000003c
 8000518:	20000000 	.word	0x20000000
 800051c:	40010800 	.word	0x40010800
 8000520:	20000008 	.word	0x20000008
 8000524:	2000004c 	.word	0x2000004c
 8000528:	200000b4 	.word	0x200000b4

0800052c <RunForward>:

void RunForward(){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	motor_set_speed(MOTOR_TOP_LEFT, 60);
 8000530:	213c      	movs	r1, #60	; 0x3c
 8000532:	2001      	movs	r0, #1
 8000534:	f7ff ff6a 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_BOT_LEFT, 60);
 8000538:	213c      	movs	r1, #60	; 0x3c
 800053a:	2003      	movs	r0, #3
 800053c:	f7ff ff66 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_TOP_RIGHT, 60);
 8000540:	213c      	movs	r1, #60	; 0x3c
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ff62 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_BOT_RIGHT, 60);
 8000548:	213c      	movs	r1, #60	; 0x3c
 800054a:	2002      	movs	r0, #2
 800054c:	f7ff ff5e 	bl	800040c <motor_set_speed>
	motor_dir_forward(MOTOR_TOP_LEFT);
 8000550:	2001      	movs	r0, #1
 8000552:	f7ff ff0d 	bl	8000370 <motor_dir_forward>
	motor_dir_forward(MOTOR_BOT_LEFT);
 8000556:	2003      	movs	r0, #3
 8000558:	f7ff ff0a 	bl	8000370 <motor_dir_forward>
	motor_dir_forward(MOTOR_TOP_RIGHT);
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff ff07 	bl	8000370 <motor_dir_forward>
	motor_dir_forward(MOTOR_BOT_RIGHT);
 8000562:	2002      	movs	r0, #2
 8000564:	f7ff ff04 	bl	8000370 <motor_dir_forward>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}

0800056c <RunBackward>:

void RunBackward(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	motor_set_speed(MOTOR_TOP_LEFT, 60);
 8000570:	213c      	movs	r1, #60	; 0x3c
 8000572:	2001      	movs	r0, #1
 8000574:	f7ff ff4a 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_BOT_LEFT, 60);
 8000578:	213c      	movs	r1, #60	; 0x3c
 800057a:	2003      	movs	r0, #3
 800057c:	f7ff ff46 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_TOP_RIGHT, 60);
 8000580:	213c      	movs	r1, #60	; 0x3c
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff ff42 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_BOT_RIGHT, 60);
 8000588:	213c      	movs	r1, #60	; 0x3c
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff ff3e 	bl	800040c <motor_set_speed>
	motor_dir_backward(MOTOR_TOP_LEFT);
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff ff05 	bl	80003a0 <motor_dir_backward>
	motor_dir_backward(MOTOR_BOT_LEFT);
 8000596:	2003      	movs	r0, #3
 8000598:	f7ff ff02 	bl	80003a0 <motor_dir_backward>
	motor_dir_backward(MOTOR_TOP_RIGHT);
 800059c:	2000      	movs	r0, #0
 800059e:	f7ff feff 	bl	80003a0 <motor_dir_backward>
	motor_dir_backward(MOTOR_BOT_RIGHT);
 80005a2:	2002      	movs	r0, #2
 80005a4:	f7ff fefc 	bl	80003a0 <motor_dir_backward>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <Stop>:

void Stop(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	motor_stop(MOTOR_TOP_LEFT);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f7ff ff0d 	bl	80003d0 <motor_stop>
	motor_stop(MOTOR_BOT_LEFT);
 80005b6:	2003      	movs	r0, #3
 80005b8:	f7ff ff0a 	bl	80003d0 <motor_stop>
	motor_stop(MOTOR_TOP_RIGHT);
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff ff07 	bl	80003d0 <motor_stop>
	motor_stop(MOTOR_BOT_RIGHT);
 80005c2:	2002      	movs	r0, #2
 80005c4:	f7ff ff04 	bl	80003d0 <motor_stop>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}

080005cc <TurnLeft>:

void TurnLeft(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	motor_set_speed(MOTOR_TOP_LEFT, 50);
 80005d0:	2132      	movs	r1, #50	; 0x32
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff ff1a 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_BOT_LEFT, 50);
 80005d8:	2132      	movs	r1, #50	; 0x32
 80005da:	2003      	movs	r0, #3
 80005dc:	f7ff ff16 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_TOP_RIGHT, 50);
 80005e0:	2132      	movs	r1, #50	; 0x32
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ff12 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_BOT_RIGHT, 50);
 80005e8:	2132      	movs	r1, #50	; 0x32
 80005ea:	2002      	movs	r0, #2
 80005ec:	f7ff ff0e 	bl	800040c <motor_set_speed>
	motor_dir_backward(MOTOR_TOP_LEFT);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f7ff fed5 	bl	80003a0 <motor_dir_backward>
	motor_dir_backward(MOTOR_BOT_LEFT);
 80005f6:	2003      	movs	r0, #3
 80005f8:	f7ff fed2 	bl	80003a0 <motor_dir_backward>
	motor_dir_forward(MOTOR_TOP_RIGHT);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff feb7 	bl	8000370 <motor_dir_forward>
	motor_dir_forward(MOTOR_BOT_RIGHT);
 8000602:	2002      	movs	r0, #2
 8000604:	f7ff feb4 	bl	8000370 <motor_dir_forward>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <TurnRight>:

void TurnRight(){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	motor_set_speed(MOTOR_TOP_LEFT, 50);
 8000610:	2132      	movs	r1, #50	; 0x32
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff fefa 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_BOT_LEFT, 50);
 8000618:	2132      	movs	r1, #50	; 0x32
 800061a:	2003      	movs	r0, #3
 800061c:	f7ff fef6 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_TOP_RIGHT, 50);
 8000620:	2132      	movs	r1, #50	; 0x32
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff fef2 	bl	800040c <motor_set_speed>
	motor_set_speed(MOTOR_BOT_RIGHT, 50);
 8000628:	2132      	movs	r1, #50	; 0x32
 800062a:	2002      	movs	r0, #2
 800062c:	f7ff feee 	bl	800040c <motor_set_speed>
	motor_dir_forward(MOTOR_TOP_LEFT);
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff fe9d 	bl	8000370 <motor_dir_forward>
	motor_dir_forward(MOTOR_BOT_LEFT);
 8000636:	2003      	movs	r0, #3
 8000638:	f7ff fe9a 	bl	8000370 <motor_dir_forward>
	motor_dir_backward(MOTOR_TOP_RIGHT);
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff feaf 	bl	80003a0 <motor_dir_backward>
	motor_dir_backward(MOTOR_BOT_RIGHT);
 8000642:	2002      	movs	r0, #2
 8000644:	f7ff feac 	bl	80003a0 <motor_dir_backward>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <getLineSensor>:
//#define INIT		0

uint8_t sensor_line = 0;
int status_robot = 0;

void getLineSensor(){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	sensor_line = 0;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <getLineSensor+0x5c>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(LEFT_LINE_GPIO_Port, LEFT_LINE_Pin) == 0) sensor_line += 4;
 8000656:	2110      	movs	r1, #16
 8000658:	4814      	ldr	r0, [pc, #80]	; (80006ac <getLineSensor+0x60>)
 800065a:	f000 fe19 	bl	8001290 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d105      	bne.n	8000670 <getLineSensor+0x24>
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <getLineSensor+0x5c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	3304      	adds	r3, #4
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <getLineSensor+0x5c>)
 800066e:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(CENTER_LINE_GPIO_Port, CENTER_LINE_Pin) == 0) sensor_line += 2;
 8000670:	2120      	movs	r1, #32
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <getLineSensor+0x60>)
 8000674:	f000 fe0c 	bl	8001290 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d105      	bne.n	800068a <getLineSensor+0x3e>
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <getLineSensor+0x5c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3302      	adds	r3, #2
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <getLineSensor+0x5c>)
 8000688:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(RIGHT_LINE_GPIO_Port, RIGHT_LINE_Pin) == 0) sensor_line += 1;
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <getLineSensor+0x60>)
 800068e:	f000 fdff 	bl	8001290 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d105      	bne.n	80006a4 <getLineSensor+0x58>
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <getLineSensor+0x5c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <getLineSensor+0x5c>)
 80006a2:	701a      	strb	r2, [r3, #0]
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000005c 	.word	0x2000005c
 80006ac:	40010c00 	.word	0x40010c00

080006b0 <lineFollow>:

void lineFollow(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	switch (status_robot) {
 80006b4:	4b57      	ldr	r3, [pc, #348]	; (8000814 <lineFollow+0x164>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	f200 80a0 	bhi.w	80007fe <lineFollow+0x14e>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <lineFollow+0x14>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	080006d5 	.word	0x080006d5
 80006c8:	08000711 	.word	0x08000711
 80006cc:	080007a7 	.word	0x080007a7
 80006d0:	0800074f 	.word	0x0800074f
		case INIT:
			if(sensor_line == 0b010) status_robot = LINE_CENTER;
 80006d4:	4b50      	ldr	r3, [pc, #320]	; (8000818 <lineFollow+0x168>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d102      	bne.n	80006e2 <lineFollow+0x32>
 80006dc:	4b4d      	ldr	r3, [pc, #308]	; (8000814 <lineFollow+0x164>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
			if(sensor_line == 0b100 || sensor_line == 0b110){
 80006e2:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <lineFollow+0x168>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d003      	beq.n	80006f2 <lineFollow+0x42>
 80006ea:	4b4b      	ldr	r3, [pc, #300]	; (8000818 <lineFollow+0x168>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b06      	cmp	r3, #6
 80006f0:	d102      	bne.n	80006f8 <lineFollow+0x48>
				status_robot = LINE_LEFT;
 80006f2:	4b48      	ldr	r3, [pc, #288]	; (8000814 <lineFollow+0x164>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	601a      	str	r2, [r3, #0]
			}
			if(sensor_line == 0b001 || sensor_line == 0b011){
 80006f8:	4b47      	ldr	r3, [pc, #284]	; (8000818 <lineFollow+0x168>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d003      	beq.n	8000708 <lineFollow+0x58>
 8000700:	4b45      	ldr	r3, [pc, #276]	; (8000818 <lineFollow+0x168>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b03      	cmp	r3, #3
 8000706:	d17c      	bne.n	8000802 <lineFollow+0x152>
				status_robot = LINE_LEFT;
 8000708:	4b42      	ldr	r3, [pc, #264]	; (8000814 <lineFollow+0x164>)
 800070a:	2202      	movs	r2, #2
 800070c:	601a      	str	r2, [r3, #0]
			}
			break;
 800070e:	e078      	b.n	8000802 <lineFollow+0x152>
		case LINE_CENTER:
			RunForward();
 8000710:	f7ff ff0c 	bl	800052c <RunForward>
			if(sensor_line == 0b000){
 8000714:	4b40      	ldr	r3, [pc, #256]	; (8000818 <lineFollow+0x168>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d101      	bne.n	8000720 <lineFollow+0x70>
				RunBackward();
 800071c:	f7ff ff26 	bl	800056c <RunBackward>
			}

			if(sensor_line == 0b100 || sensor_line == 0b110){
 8000720:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <lineFollow+0x168>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b04      	cmp	r3, #4
 8000726:	d003      	beq.n	8000730 <lineFollow+0x80>
 8000728:	4b3b      	ldr	r3, [pc, #236]	; (8000818 <lineFollow+0x168>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b06      	cmp	r3, #6
 800072e:	d102      	bne.n	8000736 <lineFollow+0x86>
				status_robot = LINE_LEFT;
 8000730:	4b38      	ldr	r3, [pc, #224]	; (8000814 <lineFollow+0x164>)
 8000732:	2202      	movs	r2, #2
 8000734:	601a      	str	r2, [r3, #0]
			}
			if(sensor_line == 0b001 || sensor_line == 0b011){
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <lineFollow+0x168>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d003      	beq.n	8000746 <lineFollow+0x96>
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <lineFollow+0x168>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d15f      	bne.n	8000806 <lineFollow+0x156>
				status_robot = LINE_RIGHT;
 8000746:	4b33      	ldr	r3, [pc, #204]	; (8000814 <lineFollow+0x164>)
 8000748:	2203      	movs	r2, #3
 800074a:	601a      	str	r2, [r3, #0]
			}

			break;
 800074c:	e05b      	b.n	8000806 <lineFollow+0x156>
		case LINE_RIGHT:
			motor_set_speed(MOTOR_TOP_LEFT, 80);
 800074e:	2150      	movs	r1, #80	; 0x50
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff fe5b 	bl	800040c <motor_set_speed>
			motor_set_speed(MOTOR_BOT_LEFT, 80);
 8000756:	2150      	movs	r1, #80	; 0x50
 8000758:	2003      	movs	r0, #3
 800075a:	f7ff fe57 	bl	800040c <motor_set_speed>
			motor_set_speed(MOTOR_TOP_RIGHT, 50);
 800075e:	2132      	movs	r1, #50	; 0x32
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff fe53 	bl	800040c <motor_set_speed>
			motor_set_speed(MOTOR_BOT_RIGHT, 50);
 8000766:	2132      	movs	r1, #50	; 0x32
 8000768:	2002      	movs	r0, #2
 800076a:	f7ff fe4f 	bl	800040c <motor_set_speed>
			motor_dir_forward(MOTOR_TOP_LEFT);
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fdfe 	bl	8000370 <motor_dir_forward>
			motor_dir_forward(MOTOR_BOT_LEFT);
 8000774:	2003      	movs	r0, #3
 8000776:	f7ff fdfb 	bl	8000370 <motor_dir_forward>
			motor_dir_forward(MOTOR_TOP_RIGHT);
 800077a:	2000      	movs	r0, #0
 800077c:	f7ff fdf8 	bl	8000370 <motor_dir_forward>
			motor_dir_forward(MOTOR_BOT_RIGHT);
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff fdf5 	bl	8000370 <motor_dir_forward>

			if(sensor_line == 0b000) TurnRight();
 8000786:	4b24      	ldr	r3, [pc, #144]	; (8000818 <lineFollow+0x168>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d101      	bne.n	8000792 <lineFollow+0xe2>
 800078e:	f7ff ff3d 	bl	800060c <TurnRight>

			if(sensor_line == 0b010) {
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <lineFollow+0x168>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d137      	bne.n	800080a <lineFollow+0x15a>
				Stop();
 800079a:	f7ff ff07 	bl	80005ac <Stop>
				status_robot = LINE_CENTER;
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <lineFollow+0x164>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
			}
			break;
 80007a4:	e031      	b.n	800080a <lineFollow+0x15a>

		case LINE_LEFT:
			motor_set_speed(MOTOR_TOP_LEFT, 50);
 80007a6:	2132      	movs	r1, #50	; 0x32
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff fe2f 	bl	800040c <motor_set_speed>
			motor_set_speed(MOTOR_BOT_LEFT, 50);
 80007ae:	2132      	movs	r1, #50	; 0x32
 80007b0:	2003      	movs	r0, #3
 80007b2:	f7ff fe2b 	bl	800040c <motor_set_speed>
			motor_set_speed(MOTOR_TOP_RIGHT, 80);
 80007b6:	2150      	movs	r1, #80	; 0x50
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff fe27 	bl	800040c <motor_set_speed>
			motor_set_speed(MOTOR_BOT_RIGHT, 80);
 80007be:	2150      	movs	r1, #80	; 0x50
 80007c0:	2002      	movs	r0, #2
 80007c2:	f7ff fe23 	bl	800040c <motor_set_speed>
			motor_dir_forward(MOTOR_TOP_LEFT);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff fdd2 	bl	8000370 <motor_dir_forward>
			motor_dir_forward(MOTOR_BOT_LEFT);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f7ff fdcf 	bl	8000370 <motor_dir_forward>
			motor_dir_forward(MOTOR_TOP_RIGHT);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fdcc 	bl	8000370 <motor_dir_forward>
			motor_dir_forward(MOTOR_BOT_RIGHT);
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff fdc9 	bl	8000370 <motor_dir_forward>

			if(sensor_line == 0b000) TurnLeft();
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <lineFollow+0x168>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <lineFollow+0x13a>
 80007e6:	f7ff fef1 	bl	80005cc <TurnLeft>

			if(sensor_line == 0b010) {
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <lineFollow+0x168>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d10d      	bne.n	800080e <lineFollow+0x15e>
				Stop();
 80007f2:	f7ff fedb 	bl	80005ac <Stop>
				status_robot = LINE_CENTER;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <lineFollow+0x164>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
			}
			break;
 80007fc:	e007      	b.n	800080e <lineFollow+0x15e>
		default:
			break;
 80007fe:	bf00      	nop
 8000800:	e006      	b.n	8000810 <lineFollow+0x160>
			break;
 8000802:	bf00      	nop
 8000804:	e004      	b.n	8000810 <lineFollow+0x160>
			break;
 8000806:	bf00      	nop
 8000808:	e002      	b.n	8000810 <lineFollow+0x160>
			break;
 800080a:	bf00      	nop
 800080c:	e000      	b.n	8000810 <lineFollow+0x160>
			break;
 800080e:	bf00      	nop
//			motor_set_speed(MOTOR_BOT_RIGHT, 50);
//			break;
//		default:
//			break;
//	}
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000060 	.word	0x20000060
 8000818:	2000005c 	.word	0x2000005c

0800081c <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <timer2_init+0x10>)
 8000822:	f001 f9ab 	bl	8001b7c <HAL_TIM_Base_Start_IT>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000006c 	.word	0x2000006c

08000830 <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <timer2_set+0x28>)
 800083e:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <timer2_set+0x28>)
 8000842:	881a      	ldrh	r2, [r3, #0]
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <timer2_set+0x2c>)
 8000846:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <timer2_set+0x30>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	20000068 	.word	0x20000068
 800085c:	20000066 	.word	0x20000066
 8000860:	20000064 	.word	0x20000064

08000864 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000874:	d114      	bne.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d010      	beq.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	3b01      	subs	r3, #1
 8000884:	b29a      	uxth	r2, r3
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000888:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d106      	bne.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800089a:	881a      	ldrh	r2, [r3, #0]
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 800089e:	801a      	strh	r2, [r3, #0]
//				timer4_flag = 1;
//				timer4_counter = timer4_mul;
//			}
//		}
//	}
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000066 	.word	0x20000066
 80008b0:	20000064 	.word	0x20000064
 80008b4:	20000068 	.word	0x20000068

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_MspInit+0x5c>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <HAL_MspInit+0x5c>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_MspInit+0x5c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x5c>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x5c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x5c>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_MspInit+0x60>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_MspInit+0x60>)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	40021000 	.word	0x40021000
 8000918:	40010000 	.word	0x40010000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000962:	f000 f9e7 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <TIM2_IRQHandler+0x10>)
 8000972:	f001 fa4f 	bl	8001e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000006c 	.word	0x2000006c

08000980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	463b      	mov	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009b2:	2247      	movs	r2, #71	; 0x47
 80009b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009d2:	f001 f883 	bl	8001adc <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009dc:	f7ff fcac 	bl	8000338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	4619      	mov	r1, r3
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_TIM2_Init+0x94>)
 80009ee:	f001 fbdb 	bl	80021a8 <HAL_TIM_ConfigClockSource>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009f8:	f7ff fc9e 	bl	8000338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_TIM2_Init+0x94>)
 8000a0a:	f001 ff5d 	bl	80028c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f7ff fc90 	bl	8000338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000006c 	.word	0x2000006c

08000a24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	f107 0320 	add.w	r3, r7, #32
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
 8000a50:	615a      	str	r2, [r3, #20]
 8000a52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a54:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000a56:	4a3e      	ldr	r2, [pc, #248]	; (8000b50 <MX_TIM3_Init+0x12c>)
 8000a58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 359;
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000a5c:	f240 1267 	movw	r2, #359	; 0x167
 8000a60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000a68:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000a6a:	2263      	movs	r2, #99	; 0x63
 8000a6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a7a:	4834      	ldr	r0, [pc, #208]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000a7c:	f001 f82e 	bl	8001adc <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a86:	f7ff fc57 	bl	8000338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a94:	4619      	mov	r1, r3
 8000a96:	482d      	ldr	r0, [pc, #180]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000a98:	f001 fb86 	bl	80021a8 <HAL_TIM_ConfigClockSource>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000aa2:	f7ff fc49 	bl	8000338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aa6:	4829      	ldr	r0, [pc, #164]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000aa8:	f001 f8ba 	bl	8001c20 <HAL_TIM_PWM_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ab2:	f7ff fc41 	bl	8000338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4821      	ldr	r0, [pc, #132]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000ac6:	f001 feff 	bl	80028c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ad0:	f7ff fc32 	bl	8000338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad4:	2360      	movs	r3, #96	; 0x60
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4818      	ldr	r0, [pc, #96]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000aec:	f001 fa9a 	bl	8002024 <HAL_TIM_PWM_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000af6:	f7ff fc1f 	bl	8000338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2204      	movs	r2, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4812      	ldr	r0, [pc, #72]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000b02:	f001 fa8f 	bl	8002024 <HAL_TIM_PWM_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000b0c:	f7ff fc14 	bl	8000338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2208      	movs	r2, #8
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000b18:	f001 fa84 	bl	8002024 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000b22:	f7ff fc09 	bl	8000338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	220c      	movs	r2, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000b2e:	f001 fa79 	bl	8002024 <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000b38:	f7ff fbfe 	bl	8000338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <MX_TIM3_Init+0x128>)
 8000b3e:	f000 f841 	bl	8000bc4 <HAL_TIM_MspPostInit>

}
 8000b42:	bf00      	nop
 8000b44:	3738      	adds	r7, #56	; 0x38
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000b4 	.word	0x200000b4
 8000b50:	40000400 	.word	0x40000400

08000b54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b64:	d114      	bne.n	8000b90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_TIM_Base_MspInit+0x68>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_TIM_Base_MspInit+0x68>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_TIM_Base_MspInit+0x68>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	201c      	movs	r0, #28
 8000b84:	f000 f9c9 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b88:	201c      	movs	r0, #28
 8000b8a:	f000 f9e2 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b8e:	e010      	b.n	8000bb2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_TIM_Base_MspInit+0x6c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10b      	bne.n	8000bb2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_TIM_Base_MspInit+0x68>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_TIM_Base_MspInit+0x68>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_TIM_Base_MspInit+0x68>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40000400 	.word	0x40000400

08000bc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <HAL_TIM_MspPostInit+0x88>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d12f      	bne.n	8000c44 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_TIM_MspPostInit+0x8c>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <HAL_TIM_MspPostInit+0x8c>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_TIM_MspPostInit+0x8c>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_TIM_MspPostInit+0x8c>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <HAL_TIM_MspPostInit+0x8c>)
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_TIM_MspPostInit+0x8c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0308 	and.w	r3, r3, #8
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c14:	23c0      	movs	r3, #192	; 0xc0
 8000c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	480b      	ldr	r0, [pc, #44]	; (8000c54 <HAL_TIM_MspPostInit+0x90>)
 8000c28:	f000 f9ae 	bl	8000f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <HAL_TIM_MspPostInit+0x94>)
 8000c40:	f000 f9a2 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c44:	bf00      	nop
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40000400 	.word	0x40000400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010800 	.word	0x40010800
 8000c58:	40010c00 	.word	0x40010c00

08000c5c <Reset_Handler>:
 8000c5c:	f7ff fe90 	bl	8000980 <SystemInit>
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <LoopFillZerobss+0xe>)
 8000c62:	490c      	ldr	r1, [pc, #48]	; (8000c94 <LoopFillZerobss+0x12>)
 8000c64:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <LoopFillZerobss+0x16>)
 8000c66:	2300      	movs	r3, #0
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:
 8000c6a:	58d4      	ldr	r4, [r2, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:
 8000c70:	18c4      	adds	r4, r0, r3
 8000c72:	428c      	cmp	r4, r1
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
 8000c76:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <LoopFillZerobss+0x1a>)
 8000c78:	4c09      	ldr	r4, [pc, #36]	; (8000ca0 <LoopFillZerobss+0x1e>)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:
 8000c82:	42a2      	cmp	r2, r4
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
 8000c86:	f001 fe97 	bl	80029b8 <__libc_init_array>
 8000c8a:	f7ff facb 	bl	8000224 <main>
 8000c8e:	4770      	bx	lr
 8000c90:	20000000 	.word	0x20000000
 8000c94:	2000001c 	.word	0x2000001c
 8000c98:	08002a44 	.word	0x08002a44
 8000c9c:	2000001c 	.word	0x2000001c
 8000ca0:	20000100 	.word	0x20000100

08000ca4 <ADC1_2_IRQHandler>:
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_Init+0x28>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_Init+0x28>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f923 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f000 f808 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fdf8 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f93b 	bl	8000f6e <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f000 f903 	bl	8000f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	20000018 	.word	0x20000018
 8000d30:	20000014 	.word	0x20000014

08000d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_IncTick+0x1c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x20>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a03      	ldr	r2, [pc, #12]	; (8000d54 <HAL_IncTick+0x20>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	20000018 	.word	0x20000018
 8000d54:	200000fc 	.word	0x200000fc

08000d58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <HAL_GetTick+0x10>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	200000fc 	.word	0x200000fc

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4906      	ldr	r1, [pc, #24]	; (8000e04 <__NVIC_EnableIRQ+0x34>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f7ff ff90 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff2d 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff42 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff90 	bl	8000e5c <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5f 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff35 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffa2 	bl	8000ec0 <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b08b      	sub	sp, #44	; 0x2c
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9a:	e169      	b.n	8001270 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 8158 	bne.w	800126a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	4a9a      	ldr	r2, [pc, #616]	; (8001228 <HAL_GPIO_Init+0x2a0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d05e      	beq.n	8001082 <HAL_GPIO_Init+0xfa>
 8000fc4:	4a98      	ldr	r2, [pc, #608]	; (8001228 <HAL_GPIO_Init+0x2a0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d875      	bhi.n	80010b6 <HAL_GPIO_Init+0x12e>
 8000fca:	4a98      	ldr	r2, [pc, #608]	; (800122c <HAL_GPIO_Init+0x2a4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d058      	beq.n	8001082 <HAL_GPIO_Init+0xfa>
 8000fd0:	4a96      	ldr	r2, [pc, #600]	; (800122c <HAL_GPIO_Init+0x2a4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d86f      	bhi.n	80010b6 <HAL_GPIO_Init+0x12e>
 8000fd6:	4a96      	ldr	r2, [pc, #600]	; (8001230 <HAL_GPIO_Init+0x2a8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d052      	beq.n	8001082 <HAL_GPIO_Init+0xfa>
 8000fdc:	4a94      	ldr	r2, [pc, #592]	; (8001230 <HAL_GPIO_Init+0x2a8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d869      	bhi.n	80010b6 <HAL_GPIO_Init+0x12e>
 8000fe2:	4a94      	ldr	r2, [pc, #592]	; (8001234 <HAL_GPIO_Init+0x2ac>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d04c      	beq.n	8001082 <HAL_GPIO_Init+0xfa>
 8000fe8:	4a92      	ldr	r2, [pc, #584]	; (8001234 <HAL_GPIO_Init+0x2ac>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d863      	bhi.n	80010b6 <HAL_GPIO_Init+0x12e>
 8000fee:	4a92      	ldr	r2, [pc, #584]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d046      	beq.n	8001082 <HAL_GPIO_Init+0xfa>
 8000ff4:	4a90      	ldr	r2, [pc, #576]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d85d      	bhi.n	80010b6 <HAL_GPIO_Init+0x12e>
 8000ffa:	2b12      	cmp	r3, #18
 8000ffc:	d82a      	bhi.n	8001054 <HAL_GPIO_Init+0xcc>
 8000ffe:	2b12      	cmp	r3, #18
 8001000:	d859      	bhi.n	80010b6 <HAL_GPIO_Init+0x12e>
 8001002:	a201      	add	r2, pc, #4	; (adr r2, 8001008 <HAL_GPIO_Init+0x80>)
 8001004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001008:	08001083 	.word	0x08001083
 800100c:	0800105d 	.word	0x0800105d
 8001010:	0800106f 	.word	0x0800106f
 8001014:	080010b1 	.word	0x080010b1
 8001018:	080010b7 	.word	0x080010b7
 800101c:	080010b7 	.word	0x080010b7
 8001020:	080010b7 	.word	0x080010b7
 8001024:	080010b7 	.word	0x080010b7
 8001028:	080010b7 	.word	0x080010b7
 800102c:	080010b7 	.word	0x080010b7
 8001030:	080010b7 	.word	0x080010b7
 8001034:	080010b7 	.word	0x080010b7
 8001038:	080010b7 	.word	0x080010b7
 800103c:	080010b7 	.word	0x080010b7
 8001040:	080010b7 	.word	0x080010b7
 8001044:	080010b7 	.word	0x080010b7
 8001048:	080010b7 	.word	0x080010b7
 800104c:	08001065 	.word	0x08001065
 8001050:	08001079 	.word	0x08001079
 8001054:	4a79      	ldr	r2, [pc, #484]	; (800123c <HAL_GPIO_Init+0x2b4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800105a:	e02c      	b.n	80010b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	623b      	str	r3, [r7, #32]
          break;
 8001062:	e029      	b.n	80010b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	3304      	adds	r3, #4
 800106a:	623b      	str	r3, [r7, #32]
          break;
 800106c:	e024      	b.n	80010b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	3308      	adds	r3, #8
 8001074:	623b      	str	r3, [r7, #32]
          break;
 8001076:	e01f      	b.n	80010b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	330c      	adds	r3, #12
 800107e:	623b      	str	r3, [r7, #32]
          break;
 8001080:	e01a      	b.n	80010b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800108a:	2304      	movs	r3, #4
 800108c:	623b      	str	r3, [r7, #32]
          break;
 800108e:	e013      	b.n	80010b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d105      	bne.n	80010a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001098:	2308      	movs	r3, #8
 800109a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	611a      	str	r2, [r3, #16]
          break;
 80010a2:	e009      	b.n	80010b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a4:	2308      	movs	r3, #8
 80010a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	615a      	str	r2, [r3, #20]
          break;
 80010ae:	e003      	b.n	80010b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
          break;
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x130>
          break;
 80010b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2bff      	cmp	r3, #255	; 0xff
 80010bc:	d801      	bhi.n	80010c2 <HAL_GPIO_Init+0x13a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	e001      	b.n	80010c6 <HAL_GPIO_Init+0x13e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3304      	adds	r3, #4
 80010c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2bff      	cmp	r3, #255	; 0xff
 80010cc:	d802      	bhi.n	80010d4 <HAL_GPIO_Init+0x14c>
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x152>
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	3b08      	subs	r3, #8
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	210f      	movs	r1, #15
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	401a      	ands	r2, r3
 80010ec:	6a39      	ldr	r1, [r7, #32]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	431a      	orrs	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 80b1 	beq.w	800126a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001108:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <HAL_GPIO_Init+0x2b8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <HAL_GPIO_Init+0x2b8>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <HAL_GPIO_Init+0x2b8>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001120:	4a48      	ldr	r2, [pc, #288]	; (8001244 <HAL_GPIO_Init+0x2bc>)
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a40      	ldr	r2, [pc, #256]	; (8001248 <HAL_GPIO_Init+0x2c0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d013      	beq.n	8001174 <HAL_GPIO_Init+0x1ec>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a3f      	ldr	r2, [pc, #252]	; (800124c <HAL_GPIO_Init+0x2c4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d00d      	beq.n	8001170 <HAL_GPIO_Init+0x1e8>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3e      	ldr	r2, [pc, #248]	; (8001250 <HAL_GPIO_Init+0x2c8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d007      	beq.n	800116c <HAL_GPIO_Init+0x1e4>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <HAL_GPIO_Init+0x2cc>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d101      	bne.n	8001168 <HAL_GPIO_Init+0x1e0>
 8001164:	2303      	movs	r3, #3
 8001166:	e006      	b.n	8001176 <HAL_GPIO_Init+0x1ee>
 8001168:	2304      	movs	r3, #4
 800116a:	e004      	b.n	8001176 <HAL_GPIO_Init+0x1ee>
 800116c:	2302      	movs	r3, #2
 800116e:	e002      	b.n	8001176 <HAL_GPIO_Init+0x1ee>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_GPIO_Init+0x1ee>
 8001174:	2300      	movs	r3, #0
 8001176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001178:	f002 0203 	and.w	r2, r2, #3
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	4093      	lsls	r3, r2
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001186:	492f      	ldr	r1, [pc, #188]	; (8001244 <HAL_GPIO_Init+0x2bc>)
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	492c      	ldr	r1, [pc, #176]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	608b      	str	r3, [r1, #8]
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	4928      	ldr	r1, [pc, #160]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	4922      	ldr	r1, [pc, #136]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	60cb      	str	r3, [r1, #12]
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	43db      	mvns	r3, r3
 80011de:	491e      	ldr	r1, [pc, #120]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4918      	ldr	r1, [pc, #96]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	43db      	mvns	r3, r3
 8001206:	4914      	ldr	r1, [pc, #80]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 8001208:	4013      	ands	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d021      	beq.n	800125c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	490e      	ldr	r1, [pc, #56]	; (8001258 <HAL_GPIO_Init+0x2d0>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
 8001224:	e021      	b.n	800126a <HAL_GPIO_Init+0x2e2>
 8001226:	bf00      	nop
 8001228:	10320000 	.word	0x10320000
 800122c:	10310000 	.word	0x10310000
 8001230:	10220000 	.word	0x10220000
 8001234:	10210000 	.word	0x10210000
 8001238:	10120000 	.word	0x10120000
 800123c:	10110000 	.word	0x10110000
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	40010800 	.word	0x40010800
 800124c:	40010c00 	.word	0x40010c00
 8001250:	40011000 	.word	0x40011000
 8001254:	40011400 	.word	0x40011400
 8001258:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_GPIO_Init+0x304>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	43db      	mvns	r3, r3
 8001264:	4909      	ldr	r1, [pc, #36]	; (800128c <HAL_GPIO_Init+0x304>)
 8001266:	4013      	ands	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	3301      	adds	r3, #1
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	fa22 f303 	lsr.w	r3, r2, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	f47f ae8e 	bne.w	8000f9c <HAL_GPIO_Init+0x14>
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	372c      	adds	r7, #44	; 0x2c
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e001      	b.n	80012b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]
 80012ca:	4613      	mov	r3, r2
 80012cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ce:	787b      	ldrb	r3, [r7, #1]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d4:	887a      	ldrh	r2, [r7, #2]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012da:	e003      	b.n	80012e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	041a      	lsls	r2, r3, #16
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	611a      	str	r2, [r3, #16]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001300:	887a      	ldrh	r2, [r7, #2]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4013      	ands	r3, r2
 8001306:	041a      	lsls	r2, r3, #16
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43d9      	mvns	r1, r3
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	400b      	ands	r3, r1
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	611a      	str	r2, [r3, #16]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e272      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8087 	beq.w	800144e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001340:	4b92      	ldr	r3, [pc, #584]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b04      	cmp	r3, #4
 800134a:	d00c      	beq.n	8001366 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800134c:	4b8f      	ldr	r3, [pc, #572]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b08      	cmp	r3, #8
 8001356:	d112      	bne.n	800137e <HAL_RCC_OscConfig+0x5e>
 8001358:	4b8c      	ldr	r3, [pc, #560]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001364:	d10b      	bne.n	800137e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001366:	4b89      	ldr	r3, [pc, #548]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d06c      	beq.n	800144c <HAL_RCC_OscConfig+0x12c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d168      	bne.n	800144c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e24c      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x76>
 8001388:	4b80      	ldr	r3, [pc, #512]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a7f      	ldr	r2, [pc, #508]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 800138e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	e02e      	b.n	80013f4 <HAL_RCC_OscConfig+0xd4>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x98>
 800139e:	4b7b      	ldr	r3, [pc, #492]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a7a      	ldr	r2, [pc, #488]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b78      	ldr	r3, [pc, #480]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a77      	ldr	r2, [pc, #476]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e01d      	b.n	80013f4 <HAL_RCC_OscConfig+0xd4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0xbc>
 80013c2:	4b72      	ldr	r3, [pc, #456]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a71      	ldr	r2, [pc, #452]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b6f      	ldr	r3, [pc, #444]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a6e      	ldr	r2, [pc, #440]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0xd4>
 80013dc:	4b6b      	ldr	r3, [pc, #428]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a6a      	ldr	r2, [pc, #424]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a67      	ldr	r2, [pc, #412]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fcac 	bl	8000d58 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fca8 	bl	8000d58 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e200      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b5d      	ldr	r3, [pc, #372]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0xe4>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fc98 	bl	8000d58 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fc94 	bl	8000d58 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e1ec      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x10c>
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d063      	beq.n	8001522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145a:	4b4c      	ldr	r3, [pc, #304]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001466:	4b49      	ldr	r3, [pc, #292]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b08      	cmp	r3, #8
 8001470:	d11c      	bne.n	80014ac <HAL_RCC_OscConfig+0x18c>
 8001472:	4b46      	ldr	r3, [pc, #280]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d116      	bne.n	80014ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	4b43      	ldr	r3, [pc, #268]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x176>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e1c0      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4939      	ldr	r1, [pc, #228]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	e03a      	b.n	8001522 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b36      	ldr	r3, [pc, #216]	; (8001590 <HAL_RCC_OscConfig+0x270>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fc4d 	bl	8000d58 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff fc49 	bl	8000d58 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1a1      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4927      	ldr	r1, [pc, #156]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <HAL_RCC_OscConfig+0x270>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc2c 	bl	8000d58 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fc28 	bl	8000d58 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e180      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03a      	beq.n	80015a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d019      	beq.n	800156a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_RCC_OscConfig+0x274>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fc0c 	bl	8000d58 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fc08 	bl	8000d58 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e160      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_RCC_OscConfig+0x26c>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f000 fa9c 	bl	8001aa0 <RCC_Delay>
 8001568:	e01c      	b.n	80015a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_RCC_OscConfig+0x274>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001570:	f7ff fbf2 	bl	8000d58 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001576:	e00f      	b.n	8001598 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fbee 	bl	8000d58 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d908      	bls.n	8001598 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e146      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	42420000 	.word	0x42420000
 8001594:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	4b92      	ldr	r3, [pc, #584]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1e9      	bne.n	8001578 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80a6 	beq.w	80016fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b8b      	ldr	r3, [pc, #556]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10d      	bne.n	80015de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a87      	ldr	r2, [pc, #540]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b85      	ldr	r3, [pc, #532]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015da:	2301      	movs	r3, #1
 80015dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015de:	4b82      	ldr	r3, [pc, #520]	; (80017e8 <HAL_RCC_OscConfig+0x4c8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ea:	4b7f      	ldr	r3, [pc, #508]	; (80017e8 <HAL_RCC_OscConfig+0x4c8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a7e      	ldr	r2, [pc, #504]	; (80017e8 <HAL_RCC_OscConfig+0x4c8>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fbaf 	bl	8000d58 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fe:	f7ff fbab 	bl	8000d58 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b64      	cmp	r3, #100	; 0x64
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e103      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	4b75      	ldr	r3, [pc, #468]	; (80017e8 <HAL_RCC_OscConfig+0x4c8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x312>
 8001624:	4b6f      	ldr	r3, [pc, #444]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a6e      	ldr	r2, [pc, #440]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	e02d      	b.n	800168e <HAL_RCC_OscConfig+0x36e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x334>
 800163a:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a69      	ldr	r2, [pc, #420]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4a66      	ldr	r2, [pc, #408]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6213      	str	r3, [r2, #32]
 8001652:	e01c      	b.n	800168e <HAL_RCC_OscConfig+0x36e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x356>
 800165c:	4b61      	ldr	r3, [pc, #388]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a60      	ldr	r2, [pc, #384]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a5d      	ldr	r2, [pc, #372]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	e00b      	b.n	800168e <HAL_RCC_OscConfig+0x36e>
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a5a      	ldr	r2, [pc, #360]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a57      	ldr	r2, [pc, #348]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d015      	beq.n	80016c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fb5f 	bl	8000d58 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fb5b 	bl	8000d58 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0b1      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	4b4b      	ldr	r3, [pc, #300]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0ee      	beq.n	800169e <HAL_RCC_OscConfig+0x37e>
 80016c0:	e014      	b.n	80016ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fb49 	bl	8000d58 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff fb45 	bl	8000d58 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e09b      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ee      	bne.n	80016ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d105      	bne.n	80016fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a3b      	ldr	r2, [pc, #236]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8087 	beq.w	8001816 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	d061      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d146      	bne.n	80017aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_RCC_OscConfig+0x4cc>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fb19 	bl	8000d58 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fb15 	bl	8000d58 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e06d      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001750:	d108      	bne.n	8001764 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4921      	ldr	r1, [pc, #132]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a19      	ldr	r1, [r3, #32]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	430b      	orrs	r3, r1
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x4cc>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fae9 	bl	8000d58 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fae5 	bl	8000d58 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e03d      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x46a>
 80017a8:	e035      	b.n	8001816 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_RCC_OscConfig+0x4cc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fad2 	bl	8000d58 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff face 	bl	8000d58 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e026      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x498>
 80017d6:	e01e      	b.n	8001816 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e019      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40007000 	.word	0x40007000
 80017ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x500>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	429a      	cmp	r2, r3
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0d0      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d910      	bls.n	8001868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0207 	bic.w	r2, r3, #7
 800184e:	4965      	ldr	r1, [pc, #404]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800188a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d040      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d115      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e073      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e06b      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f023 0203 	bic.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4936      	ldr	r1, [pc, #216]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff fa20 	bl	8000d58 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff fa1c 	bl	8000d58 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e053      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d210      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 0207 	bic.w	r2, r3, #7
 800195a:	4922      	ldr	r1, [pc, #136]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490a      	ldr	r1, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1cc>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1d0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f97e 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	08002a18 	.word	0x08002a18
 80019f0:	20000010 	.word	0x20000010
 80019f4:	20000014 	.word	0x20000014

080019f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x30>
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x36>
 8001a26:	e027      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2a:	613b      	str	r3, [r7, #16]
      break;
 8001a2c:	e027      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	0c9b      	lsrs	r3, r3, #18
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a38:	5cd3      	ldrb	r3, [r2, r3]
 8001a3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d010      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	0c5b      	lsrs	r3, r3, #17
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a52:	5cd3      	ldrb	r3, [r2, r3]
 8001a54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a5a:	fb03 f202 	mul.w	r2, r3, r2
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	e004      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	613b      	str	r3, [r7, #16]
      break;
 8001a76:	e002      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a7a:	613b      	str	r3, [r7, #16]
      break;
 8001a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7e:	693b      	ldr	r3, [r7, #16]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	371c      	adds	r7, #28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	007a1200 	.word	0x007a1200
 8001a94:	08002a28 	.word	0x08002a28
 8001a98:	08002a38 	.word	0x08002a38
 8001a9c:	003d0900 	.word	0x003d0900

08001aa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <RCC_Delay+0x34>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <RCC_Delay+0x38>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0a5b      	lsrs	r3, r3, #9
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001abc:	bf00      	nop
  }
  while (Delay --);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1e5a      	subs	r2, r3, #1
 8001ac2:	60fa      	str	r2, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f9      	bne.n	8001abc <RCC_Delay+0x1c>
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	20000010 	.word	0x20000010
 8001ad8:	10624dd3 	.word	0x10624dd3

08001adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e041      	b.n	8001b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff f826 	bl	8000b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 fc30 	bl	8002380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d001      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e03a      	b.n	8001c0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <HAL_TIM_Base_Start_IT+0x98>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00e      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x58>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bbe:	d009      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x58>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <HAL_TIM_Base_Start_IT+0x9c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d004      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x58>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <HAL_TIM_Base_Start_IT+0xa0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d111      	bne.n	8001bf8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d010      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf6:	e007      	b.n	8001c08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	40012c00 	.word	0x40012c00
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	40000800 	.word	0x40000800

08001c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e041      	b.n	8001cb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f839 	bl	8001cbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f000 fb8e 	bl	8002380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_TIM_PWM_Start+0x24>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	e022      	b.n	8001d3a <HAL_TIM_PWM_Start+0x6a>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d109      	bne.n	8001d0e <HAL_TIM_PWM_Start+0x3e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	e015      	b.n	8001d3a <HAL_TIM_PWM_Start+0x6a>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d109      	bne.n	8001d28 <HAL_TIM_PWM_Start+0x58>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e008      	b.n	8001d3a <HAL_TIM_PWM_Start+0x6a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e05e      	b.n	8001e00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d104      	bne.n	8001d52 <HAL_TIM_PWM_Start+0x82>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d50:	e013      	b.n	8001d7a <HAL_TIM_PWM_Start+0xaa>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_PWM_Start+0x92>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d60:	e00b      	b.n	8001d7a <HAL_TIM_PWM_Start+0xaa>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_PWM_Start+0xa2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d70:	e003      	b.n	8001d7a <HAL_TIM_PWM_Start+0xaa>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fd7c 	bl	8002880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_TIM_PWM_Start+0x138>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d107      	bne.n	8001da2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <HAL_TIM_PWM_Start+0x138>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00e      	beq.n	8001dca <HAL_TIM_PWM_Start+0xfa>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d009      	beq.n	8001dca <HAL_TIM_PWM_Start+0xfa>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_TIM_PWM_Start+0x13c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d004      	beq.n	8001dca <HAL_TIM_PWM_Start+0xfa>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_TIM_PWM_Start+0x140>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d111      	bne.n	8001dee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d010      	beq.n	8001dfe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	e007      	b.n	8001dfe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40012c00 	.word	0x40012c00
 8001e0c:	40000400 	.word	0x40000400
 8001e10:	40000800 	.word	0x40000800

08001e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d122      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d11b      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0202 	mvn.w	r2, #2
 8001e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fa76 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8001e5c:	e005      	b.n	8001e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fa69 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fa78 	bl	800235a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d122      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d11b      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0204 	mvn.w	r2, #4
 8001e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fa4c 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fa3f 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fa4e 	bl	800235a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d122      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d11b      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0208 	mvn.w	r2, #8
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fa22 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fa15 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fa24 	bl	800235a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d122      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d11b      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0210 	mvn.w	r2, #16
 8001f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2208      	movs	r2, #8
 8001f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f9f8 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8001f58:	e005      	b.n	8001f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f9eb 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f9fa 	bl	800235a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d10e      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0201 	mvn.w	r2, #1
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fc66 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	2b80      	cmp	r3, #128	; 0x80
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb0:	2b80      	cmp	r3, #128	; 0x80
 8001fb2:	d107      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fce9 	bl	8002996 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fce:	2b40      	cmp	r3, #64	; 0x40
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d107      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f9be 	bl	800236c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d10e      	bne.n	800201c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b20      	cmp	r3, #32
 800200a:	d107      	bne.n	800201c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0220 	mvn.w	r2, #32
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fcb4 	bl	8002984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800203e:	2302      	movs	r3, #2
 8002040:	e0ae      	b.n	80021a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b0c      	cmp	r3, #12
 800204e:	f200 809f 	bhi.w	8002190 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002052:	a201      	add	r2, pc, #4	; (adr r2, 8002058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002058:	0800208d 	.word	0x0800208d
 800205c:	08002191 	.word	0x08002191
 8002060:	08002191 	.word	0x08002191
 8002064:	08002191 	.word	0x08002191
 8002068:	080020cd 	.word	0x080020cd
 800206c:	08002191 	.word	0x08002191
 8002070:	08002191 	.word	0x08002191
 8002074:	08002191 	.word	0x08002191
 8002078:	0800210f 	.word	0x0800210f
 800207c:	08002191 	.word	0x08002191
 8002080:	08002191 	.word	0x08002191
 8002084:	08002191 	.word	0x08002191
 8002088:	0800214f 	.word	0x0800214f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f9d6 	bl	8002444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0208 	orr.w	r2, r2, #8
 80020a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0204 	bic.w	r2, r2, #4
 80020b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6999      	ldr	r1, [r3, #24]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	619a      	str	r2, [r3, #24]
      break;
 80020ca:	e064      	b.n	8002196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fa1c 	bl	8002510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6999      	ldr	r1, [r3, #24]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	021a      	lsls	r2, r3, #8
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	619a      	str	r2, [r3, #24]
      break;
 800210c:	e043      	b.n	8002196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fa65 	bl	80025e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69da      	ldr	r2, [r3, #28]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0208 	orr.w	r2, r2, #8
 8002128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	69da      	ldr	r2, [r3, #28]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0204 	bic.w	r2, r2, #4
 8002138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69d9      	ldr	r1, [r3, #28]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	61da      	str	r2, [r3, #28]
      break;
 800214c:	e023      	b.n	8002196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 faaf 	bl	80026b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69d9      	ldr	r1, [r3, #28]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	021a      	lsls	r2, r3, #8
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	61da      	str	r2, [r3, #28]
      break;
 800218e:	e002      	b.n	8002196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	75fb      	strb	r3, [r7, #23]
      break;
 8002194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800219e:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x1c>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0b4      	b.n	800232e <HAL_TIM_ConfigClockSource+0x186>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021fc:	d03e      	beq.n	800227c <HAL_TIM_ConfigClockSource+0xd4>
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002202:	f200 8087 	bhi.w	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 8002206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220a:	f000 8086 	beq.w	800231a <HAL_TIM_ConfigClockSource+0x172>
 800220e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002212:	d87f      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b70      	cmp	r3, #112	; 0x70
 8002216:	d01a      	beq.n	800224e <HAL_TIM_ConfigClockSource+0xa6>
 8002218:	2b70      	cmp	r3, #112	; 0x70
 800221a:	d87b      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b60      	cmp	r3, #96	; 0x60
 800221e:	d050      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002220:	2b60      	cmp	r3, #96	; 0x60
 8002222:	d877      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 8002224:	2b50      	cmp	r3, #80	; 0x50
 8002226:	d03c      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002228:	2b50      	cmp	r3, #80	; 0x50
 800222a:	d873      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 800222c:	2b40      	cmp	r3, #64	; 0x40
 800222e:	d058      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d86f      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 8002234:	2b30      	cmp	r3, #48	; 0x30
 8002236:	d064      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x15a>
 8002238:	2b30      	cmp	r3, #48	; 0x30
 800223a:	d86b      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 800223c:	2b20      	cmp	r3, #32
 800223e:	d060      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x15a>
 8002240:	2b20      	cmp	r3, #32
 8002242:	d867      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 8002244:	2b00      	cmp	r3, #0
 8002246:	d05c      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x15a>
 8002248:	2b10      	cmp	r3, #16
 800224a:	d05a      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x15a>
 800224c:	e062      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800225e:	f000 faf0 	bl	8002842 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	609a      	str	r2, [r3, #8]
      break;
 800227a:	e04f      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800228c:	f000 fad9 	bl	8002842 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800229e:	609a      	str	r2, [r3, #8]
      break;
 80022a0:	e03c      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 fa50 	bl	8002754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2150      	movs	r1, #80	; 0x50
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 faa7 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 80022c0:	e02c      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 fa6e 	bl	80027b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2160      	movs	r1, #96	; 0x60
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fa97 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 80022e0:	e01c      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ee:	461a      	mov	r2, r3
 80022f0:	f000 fa30 	bl	8002754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2140      	movs	r1, #64	; 0x40
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fa87 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 8002300:	e00c      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f000 fa7e 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 8002312:	e003      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
      break;
 8002318:	e000      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800231a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
	...

08002380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a29      	ldr	r2, [pc, #164]	; (8002438 <TIM_Base_SetConfig+0xb8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00b      	beq.n	80023b0 <TIM_Base_SetConfig+0x30>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239e:	d007      	beq.n	80023b0 <TIM_Base_SetConfig+0x30>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <TIM_Base_SetConfig+0xbc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d003      	beq.n	80023b0 <TIM_Base_SetConfig+0x30>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <TIM_Base_SetConfig+0xc0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d108      	bne.n	80023c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <TIM_Base_SetConfig+0xb8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00b      	beq.n	80023e2 <TIM_Base_SetConfig+0x62>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d0:	d007      	beq.n	80023e2 <TIM_Base_SetConfig+0x62>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a19      	ldr	r2, [pc, #100]	; (800243c <TIM_Base_SetConfig+0xbc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_Base_SetConfig+0x62>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a18      	ldr	r2, [pc, #96]	; (8002440 <TIM_Base_SetConfig+0xc0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d108      	bne.n	80023f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <TIM_Base_SetConfig+0xb8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d103      	bne.n	8002428 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	615a      	str	r2, [r3, #20]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40000400 	.word	0x40000400
 8002440:	40000800 	.word	0x40000800

08002444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f023 0201 	bic.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0303 	bic.w	r3, r3, #3
 800247a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f023 0302 	bic.w	r3, r3, #2
 800248c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a1c      	ldr	r2, [pc, #112]	; (800250c <TIM_OC1_SetConfig+0xc8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d10c      	bne.n	80024ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f023 0308 	bic.w	r3, r3, #8
 80024a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a13      	ldr	r2, [pc, #76]	; (800250c <TIM_OC1_SetConfig+0xc8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d111      	bne.n	80024e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	621a      	str	r2, [r3, #32]
}
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40012c00 	.word	0x40012c00

08002510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f023 0210 	bic.w	r2, r3, #16
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0320 	bic.w	r3, r3, #32
 800255a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <TIM_OC2_SetConfig+0xd0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10d      	bne.n	800258c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800258a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <TIM_OC2_SetConfig+0xd0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d113      	bne.n	80025bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800259a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	621a      	str	r2, [r3, #32]
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	40012c00 	.word	0x40012c00

080025e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800262c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <TIM_OC3_SetConfig+0xd0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10d      	bne.n	800265e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800265c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <TIM_OC3_SetConfig+0xd0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d113      	bne.n	800268e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800266c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	621a      	str	r2, [r3, #32]
}
 80026a8:	bf00      	nop
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40012c00 	.word	0x40012c00

080026b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	031b      	lsls	r3, r3, #12
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <TIM_OC4_SetConfig+0x98>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d109      	bne.n	800272c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800271e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	40012c00 	.word	0x40012c00

08002754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f023 0201 	bic.w	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800277e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f023 030a 	bic.w	r3, r3, #10
 8002790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f023 0210 	bic.w	r2, r3, #16
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	031b      	lsls	r3, r3, #12
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	621a      	str	r2, [r3, #32]
}
 8002804:	bf00      	nop
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	f043 0307 	orr.w	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	609a      	str	r2, [r3, #8]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002842:	b480      	push	{r7}
 8002844:	b087      	sub	sp, #28
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	021a      	lsls	r2, r3, #8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	431a      	orrs	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4313      	orrs	r3, r2
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	609a      	str	r2, [r3, #8]
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2201      	movs	r2, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a1a      	ldr	r2, [r3, #32]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	401a      	ands	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a1a      	ldr	r2, [r3, #32]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	431a      	orrs	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028dc:	2302      	movs	r3, #2
 80028de:	e046      	b.n	800296e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00e      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d009      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a10      	ldr	r2, [pc, #64]	; (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10c      	bne.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	4313      	orrs	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800

08002984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <memset>:
 80029a8:	4603      	mov	r3, r0
 80029aa:	4402      	add	r2, r0
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d100      	bne.n	80029b2 <memset+0xa>
 80029b0:	4770      	bx	lr
 80029b2:	f803 1b01 	strb.w	r1, [r3], #1
 80029b6:	e7f9      	b.n	80029ac <memset+0x4>

080029b8 <__libc_init_array>:
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	2600      	movs	r6, #0
 80029bc:	4d0c      	ldr	r5, [pc, #48]	; (80029f0 <__libc_init_array+0x38>)
 80029be:	4c0d      	ldr	r4, [pc, #52]	; (80029f4 <__libc_init_array+0x3c>)
 80029c0:	1b64      	subs	r4, r4, r5
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	42a6      	cmp	r6, r4
 80029c6:	d109      	bne.n	80029dc <__libc_init_array+0x24>
 80029c8:	f000 f81a 	bl	8002a00 <_init>
 80029cc:	2600      	movs	r6, #0
 80029ce:	4d0a      	ldr	r5, [pc, #40]	; (80029f8 <__libc_init_array+0x40>)
 80029d0:	4c0a      	ldr	r4, [pc, #40]	; (80029fc <__libc_init_array+0x44>)
 80029d2:	1b64      	subs	r4, r4, r5
 80029d4:	10a4      	asrs	r4, r4, #2
 80029d6:	42a6      	cmp	r6, r4
 80029d8:	d105      	bne.n	80029e6 <__libc_init_array+0x2e>
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e0:	4798      	blx	r3
 80029e2:	3601      	adds	r6, #1
 80029e4:	e7ee      	b.n	80029c4 <__libc_init_array+0xc>
 80029e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ea:	4798      	blx	r3
 80029ec:	3601      	adds	r6, #1
 80029ee:	e7f2      	b.n	80029d6 <__libc_init_array+0x1e>
 80029f0:	08002a3c 	.word	0x08002a3c
 80029f4:	08002a3c 	.word	0x08002a3c
 80029f8:	08002a3c 	.word	0x08002a3c
 80029fc:	08002a40 	.word	0x08002a40

08002a00 <_init>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr

08002a0c <_fini>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr
